Code is given below:

import argparse
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Bidirectional, LSTM, Dense, Dropout

def preprocess_and_train_model(train_file, test_file, submission_file):
    # Load the dataset
    data = pd.read_csv(train_file)
    test_data = pd.read_csv(test_file)

    # Preprocess the data
    tokenizer = Tokenizer(char_level=True)
    tokenizer.fit_on_texts(data['Sequence'])

    X = tokenizer.texts_to_sequences(data['Sequence'])
    X = pad_sequences(X)

    # Encode labels
    label_encoder = LabelEncoder()
    y = label_encoder.fit_transform(data['Label'])

    # Split the data into training and validation sets
    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)

    # Build the model
    model = Sequential()
    model.add(Embedding(input_dim=len(tokenizer.word_index) + 1, output_dim=32, input_length=X.shape[1]))
    model.add(Bidirectional(LSTM(64, return_sequences=True)))
    model.add(Bidirectional(LSTM(32)))
    model.add(Dense(64, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(1, activation='sigmoid'))

    # Compile the model
    model.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['accuracy'])

    # Train the model
    model.fit(X_train, y_train, epochs=20, batch_size=64, validation_data=(X_valid, y_valid))

    # Preprocess the test data
    X_test = tokenizer.texts_to_sequences(test_data['Sequence'])
    X_test = pad_sequences(X_test, maxlen=X.shape[1])

    # Make predictions on the test data
    predictions = model.predict(X_test)
    predicted_labels = (predictions > 0.5).astype(int)

    # Convert back to original labels
    predicted_labels = label_encoder.inverse_transform(predicted_labels.flatten())

    # Create a DataFrame for submission
    submission_df = pd.DataFrame({'ID': test_data['ID'], 'Label': predicted_labels})

    # Save the submission file
    submission_df.to_csv(submission_file, index=False)

def main():
    parser = argparse.ArgumentParser(description="Protein Classification Model Trainer")
    parser.add_argument("--train_file", required=True, help="Path to the training dataset (e.g., train.csv)")
    parser.add_argument("--test_file", required=True, help="Path to the test dataset (e.g., test.csv)")
    parser.add_argument("--submission_file", required=True, help="Path to save the submission file (e.g., submission.csv)")

    args = parser.parse_args()
    preprocess_and_train_model(args.train_file, args.test_file, args.submission_file)

if __name__ == "__main__":
    main()



Terminal Command is given below:

python protein_classification.py --train_file train.csv --test_file test.csv --submission_file submission.csv