Code Written In Different Format:


import argparse
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Bidirectional, LSTM, Dense, Dropout

def load_data(train_file, test_file):
    # Load the dataset
    data = pd.read_csv(train_file)
    test_data = pd.read_csv(test_file)
    return data, test_data

def preprocess_data(data, test_data):
    # Preprocess the data
    tokenizer = Tokenizer(char_level=True)
    tokenizer.fit_on_texts(data['Sequence'])

    X = tokenizer.texts_to_sequences(data['Sequence'])
    X = pad_sequences(X)

    # Encode labels
    label_encoder = LabelEncoder()
    y = label_encoder.fit_transform(data['Label'])

    # Split the data into training and validation sets
    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)

    return tokenizer, X_train, X_valid, y_train, y_valid, test_data

def build_model(tokenizer, max_sequence_length):
    # Build the model
    model = Sequential()
    model.add(Embedding(input_dim=len(tokenizer.word_index) + 1, output_dim=32, input_length=max_sequence_length))
    model.add(Bidirectional(LSTM(64, return_sequences=True)))
    model.add(Bidirectional(LSTM(32)))
    model.add(Dense(64, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(1, activation='sigmoid'))
    return model

def train_model(model, X_train, y_train, X_valid, y_valid):
    # Compile the model
    model.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['accuracy'])

    # Train the model
    model.fit(X_train, y_train, epochs=20, batch_size=64, validation_data=(X_valid, y_valid))

def preprocess_test_data(tokenizer, test_data, max_sequence_length):
    # Preprocess the test data
    X_test = tokenizer.texts_to_sequences(test_data['Sequence'])
    X_test = pad_sequences(X_test, maxlen=max_sequence_length)
    return X_test

def make_predictions(model, X_test, label_encoder):
    # Make predictions on the test data
    predictions = model.predict(X_test)
    predicted_labels = (predictions > 0.5).astype(int)

    # Convert back to original labels
    predicted_labels = label_encoder.inverse_transform(predicted_labels.flatten())
    return predicted_labels

def save_submission_file(test_data, predicted_labels, submission_file):
    # Create a DataFrame for submission
    submission_df = pd.DataFrame({'ID': test_data['ID'], 'Label': predicted_labels})

    # Save the submission file
    submission_df.to_csv(submission_file, index=False)

def main():
    parser = argparse.ArgumentParser(description="Protein Classification Model Trainer")
    parser.add_argument("--train_file", required=True, help="Path to the training dataset (e.g., train.csv)")
    parser.add_argument("--test_file", required=True, help="Path to the test dataset (e.g., test.csv)")
    parser.add_argument("--submission_file", required=True, help="Path to save the submission file (e.g., submission.csv)")

    args = parser.parse_args()

    data, test_data = load_data(args.train_file, args.test_file)
    tokenizer, X_train, X_valid, y_train, y_valid, test_data = preprocess_data(data, test_data)
    model = build_model(tokenizer, X_train.shape[1])
    train_model(model, X_train, y_train, X_valid, y_valid)
    X_test = preprocess_test_data(tokenizer, test_data, X_train.shape[1])
    label_encoder = LabelEncoder()
    label_encoder.fit(data['Label'])
    predicted_labels = make_predictions(model, X_test, label_encoder)
    save_submission_file(test_data, predicted_labels, args.submission_file)

if __name__ == "__main__":
    main()
